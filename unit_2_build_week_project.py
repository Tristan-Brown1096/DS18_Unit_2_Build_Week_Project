# -*- coding: utf-8 -*-
"""unit_2_build_week_project_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16RaD9OaqpxEMmtCHhoCqTqfgx0SYczbE

#Data wrangling
"""

import pandas as pd
import numpy as np
!pip install category_encoders==2.*
!pip install pandas-profiling==2.*

df = pd.read_csv('https://github.com/Tristan-Brown1096/DS18_Unit_2_Build_Week_Project/blob/master/cbb_data.csv')

df.head()

df.YEAR = df.YEAR.astype(str)

df.TEAM = [team.replace(' ', '') for team in df.TEAM]

df['ID'] = df.TEAM + df.YEAR

df = df.set_index('ID')

df.head()

df.POSTSEASON = df.POSTSEASON.replace(np.NaN, 'no tourney')

df.SEED = df.SEED.replace(np.NaN, 0)

df.SEED = df.SEED.astype(int)

df.head()

"""#Split the data"""

y = df.POSTSEASON

X = df.drop(['POSTSEASON', 'TEAM', 'YEAR', 'SEED'], axis=1)

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

"""#Establish baseline prediction"""

baseline = y_train.value_counts(normalize=True).max()
print('Baseline Accuracy:', baseline)

"""#Build model_1"""

from category_encoders import OrdinalEncoder
from sklearn.ensemble import RandomForestClassifier
from category_encoders import OneHotEncoder
from sklearn.pipeline import make_pipeline
from sklearn.impute import SimpleImputer
from sklearn.feature_selection import SelectKBest

model_1 = make_pipeline(
    OrdinalEncoder(),
    SimpleImputer(),
    RandomForestClassifier(random_state=42, n_estimators=500, max_depth=4)
)

model_1.fit(X_train, y_train)

print('Training Accuracy:', model_1.score(X_train, y_train))
print('Validation Accuracy:', model_1.score(X_val, y_val))

"""#Tune model"""

from sklearn.model_selection import GridSearchCV, RandomizedSearchCV

model_2 = make_pipeline(
    OrdinalEncoder(),
    SelectKBest(),
    RandomForestClassifier()
)

params = {'selectkbest__k': range(1, 20, 2),
          'randomforestclassifier__n_estimators': range(100, 500, 20),
          'randomforestclassifier__max_depth': range(1, 20, 2),
}

gs = GridSearchCV(model_2, param_grid=params, n_jobs=-1, verbose=1, cv=5, scoring='accuracy')

gs.fit(X_train, y_train)

gs.best_params_

"""#Build model_2"""

model_2 = gs.best_estimator_

print('Training accuracy:', model_2.score(X_train, y_train))
print('Validation accuracy:', model_2.score(X_val, y_val))

"""#Tune model"""

params = {'randomforestclassifier__n_estimators': [320],
          'randomforestclassifier__max_depth': range(2, 22, 2),
          'randomforestclassifier__max_features': ['sqrt', 'log2', None]
}

gs = GridSearchCV(model_1, param_grid=params, n_jobs=-1, verbose=1, cv=5, scoring='accuracy')

gs.fit(X_train, y_train)
gs.best_params_

"""#Build model_3"""

model_3 = make_pipeline(
    OrdinalEncoder(),
    SimpleImputer(),
    RandomForestClassifier(random_state=42, n_estimators=320, max_depth=6, max_features=None)
)

model_3.fit(X_train, y_train)

print('Training accuracy:', model_3.score(X_train, y_train))
print('Validation accuracy:', model_3.score(X_val, y_val))

"""#Tune model"""

params = {'randomforestclassifier__n_estimators': range(320, 420, 10),
          'randomforestclassifier__max_depth': range(4, 12),
          'randomforestclassifier__max_features': ['sqrt', 'log2', None]
}

gs = GridSearchCV(model_3, param_grid=params, n_jobs=-1, verbose=1, cv=5, scoring='accuracy')

gs.fit(X_train, y_train)
gs.best_params_

"""#Build model_4"""

model_4 = make_pipeline(
    OrdinalEncoder(),
    SimpleImputer(),
    RandomForestClassifier(random_state=42, n_estimators=320, max_depth=5, max_features=None)
)

model_4.fit(X_train, y_train)

print('Training accuracy:', model_4.score(X_train, y_train))
print('Validation accuracy:', model_4.score(X_val, y_val))

"""#Build model_5"""

model_5 = make_pipeline(
    OrdinalEncoder(),
    SimpleImputer(),
    RandomForestClassifier(random_state=42, n_estimators=500, max_depth=5, max_features=None)
)

model_5.fit(X_train, y_train)

print('Training accuracy:', model_5.score(X_train, y_train))
print('Validation accuracy:', model_5.score(X_val, y_val))
